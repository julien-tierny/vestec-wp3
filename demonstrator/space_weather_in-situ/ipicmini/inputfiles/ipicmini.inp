# Publications that use results from iPIC3D need to properly cite  
# 'S. Markidis, G. Lapenta, and Rizwan-uddin. "Multi-scale simulations of 
# plasma with iPIC3D." Mathematics and Computers in Simulation 80.7 (2010): 1509-1519.'
#
#        Copyright 2015 KTH Royal Institute of Technology
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at 
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# This input file is intended for use with iPIC3D mini-app.
# Created by Vyacheslav Olshevsky (2018).
#

# Should there be only Maxwellian plasma, or something with load imbalance as well?
#Case              = Politano

# Will we have to take Poisson correction into account?
#PoissonCorrection = no       # Poisson correction

# Will we test output at certain point?
#WriteMethod       = pvtk     # Output method [ shdf5 || pvtk ||nbcvtk]

# Do we need a simulation name at all?
#SimulationName    = politano  # Simulation name for the output

# Probably it makes sense to use magnetic field.
#B0x = 0.01

#  %%%%%%%%%%%%%%%%%%% TIME %%%%%%%%%%%%%%%%%%
#dt 	= 0.3          	# dt = time step  

# Shall we need ncycles in future?
#ncycles = 10	    		# cycles

# How about theta, would we use different values?
#th 	= 1.0                	# th = decentering parameter

#c 	= 1.0                	# c = light speed 


#  %%%%%%%%%%%%%%%%%%% SMOOTH %%%%%%%%%%%%%%%%%%
#Smooth = 0.5                    # Smoothing value (5-points stencil),1.0=no smoothing
#SmoothNiter = 0

# %%%%%%%%%%%%%%%%%% BOX SIZE %%%%%%%%%%%%%%%
#Lx =   10                  # Lx = simulation box length - x direction   
#Ly =   10                   # Ly = simulation box length - y direction
#Lz =   10                  # Lz = simulation box length - z direction   

nxc =  32                  # nxc = number of cells - x direction        
nyc =  32                     # nyc = number of cells - y direction
nzc =  32                  # nzc = number of cells - z direction        

# %%%%%%%%%%%%%% MPI TOPOLOGY %%%%%%%%%%%%%%
# number of MPI subdomains in each direction
XLEN = 2
YLEN = 2
ZLEN = 1

# Periodic BCs add some non-local communication, maybe other BCs should be better?
# topology (1=true, 0=false): USE PERIODIC IN ALL DIRECTIONS
#PERIODICX = 1
#PERIODICY = 1
#PERIODICZ = 1

# %%%%%%%%%%%%%% PARTICLES %%%%%%%%%%%%%%%%%
#    ns = number of species
#    0 = electrons
#    1 = protons
#    2,3,4,5,... = ions

# Rather than using ns > 2 better use more particles/cell
#ns = 2

# Initial density (make sure you are neutral)
#rhoINIT =    	  1.0	 1.0  
#rhoINJECT=	  0.0	 0.0

# TrackParticleID[species] = 1=true, 0=false --> Assign ID to particles 
#TrackParticleID = 0	 0 
# npcelx = number of particles per cell - Direction X 
#npcelx =    	  3	 3
# npcely = number of particles per cell - Direction Y 
#npcely =    	  3	 3	
# npcelz = number of particles per cell - Direction Z 
#npcelz =    	  3  3


# qom = charge to mass ratio for different species 
#qom =  		 -256.0	 1.0	
# uth = thermal velocity for different species - Direction X  
#uth  = 		  0.02   0.0028
# vth = thermal velocity for different species - Direction Y 
#vth  = 		  0.02   0.0028
# wth = thermal velocity for different species - Direction Z 
#wth  = 		  0.02   0.0028


# u0 = drift velocity   - Direction X    
#u0 = 		  0.0236	 0.0236
# v0 = drift velocity   - Direction Y    
#v0 = 		  0.0	 0.0 
# w0 = drift velocity   - Direction Z    
#w0 = 		  0.0	 0.0


# &&&&&&&&&&&& boundary conditions &&&&&&&&&&&&&&&
# PHI Electrostatic Potential     
# 0,1 = Dirichilet boundary condition ;     
# 2   = Neumann boundary condition
#    Caveat: if your processor topology is set to be periodic in a direction, automatically the boundary condition in that direction will be periodic
#    bcPHIfaceXright = 1
#    bcPHIfaceXleft  = 1
#    bcPHIfaceYright = 1
#    bcPHIfaceYleft  = 1
#    bcPHIfaceZright = 1
#    bcPHIfaceZleft  = 1
    
#    EM field boundary condition
#    0 = perfect conductor
#    1 = magnetic mirror
#    Caveat: if your processor topology is set to be periodic in a direction, automatically the boundary condition in that direction will be periodic
#    bcEMfaceXright = 0
#    bcEMfaceXleft =  0
#    bcEMfaceYright = 0
#    bcEMfaceYleft =  0
#    bcEMfaceZright = 0
#    bcEMfaceZleft =  0
    
#    Particles Boundary condition
#    0 = exit
#    1 = perfect mirror
#    2 = riemission
#    Caveat: if your processor topology is set to be periodic in a direction, automatically the boundary condition in that direction will be periodic
#    bcPfaceXright = 1
#    bcPfaceXleft =  1
#    bcPfaceYright = 1
#    bcPfaceYleft =  1
#    bcPfaceZright = 1
#    bcPfaceZleft =  1

# The verbose option seems to be obsolete, it is commented everywhere in the code
#  print to video results 
#    verbose = 1
# velocity of the injection from the wall
#    Vinj= 0.0

# CG solver stopping criterium tolerance
#    CGtol 	= 1E-3
# GMRES solver stopping criterium tolerance
#    GMREStol 	= 1E-3
# mover predictor corrector iteration
#    NiterMover  = 3
# Output for field
#   FieldOutputCycle = 100000
#   FieldOutputTag   = B+E+Je+Ji
#   MomentsOutputTag = rho+PXX+PXY+PXZ+PYY+PYZ+PZZ
# Output for particles if 0 it does n0t save particles data
#   ParticlesOutputCycle = 0
#   ParticlesOutputTag 	= position+velocity+q
# Output for Diagnostic    
#   DiagnosticsOutputCycle = 1
# restart cycle
#   RestartOutputCycle = 0
   CallFinalize=1
